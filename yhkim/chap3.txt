3.1)
데이터 input 등등..



3.2)
tochableOpacity/*유저가 쓰고 있다는 걸 표현하고 싶으면 이걸 사용



import { StatusBar } from "expo-status-bar";
import React, { useEffect, useState } from "react";
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  TextInput,
  Alert,
  ScrollView,
} from "react-native";
import { Fontisto } from "@expo/vector-icons";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { theme } from "./colors";

const STORAGE_KEY = "@toDos";
export default function App() {
  const [working, setWorking] = useState(true);
  const [text, setText] = useState("");
  const [toDos, setToDos] = useState({});
  useEffect(() => {
    loadToDos();
  }, []);
  const travel = () => setWorking(false);
  const work = () => setWorking(true);
  const onChangeText = (payload) => setText(payload);
  const saveToDos = async (toSave) => { //react hs 는 state 를 변경 x 항상 useState 를 이용해서 값을 밖무.
    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));
  };
  const loadToDos = async () => {
    const s = await AsyncStorage.getItem(STORAGE_KEY);
    setToDos(JSON.parse(s));
  };
  const addToDo = async () => {
    if (text === "") {
      return;
    }
    const newToDos = {
      ...toDos,
      [Date.now()]: { text, working },
    };
    setToDos(newToDos);
    await saveToDos(newToDos);
    setText("");
  };
  const deleteToDo = (key) => {
    Alert.alert("Delete To Do", "Are you sure?", [
      { text: "Cancel" },
      {
        text: "I'm Sure",
        style: "destructive",
        onPress: () => {
          const newToDos = { ...toDos };
          delete newToDos[key];
          setToDos(newToDos);
          saveToDos(newToDos);
        },
      },
    ]);
  };

  return (
    <View style={styles.container}>
      <StatusBar style="auto" />
      <View style={styles.header}>
        <TouchableOpacity onPress={work}> 
          <Text style={{...styles.btnText, color: working ? "white": theme.grey}}>Work</Text>
        </TouchableOpacity>
        <TouchableOpacity // 이걸 제일 선호 or pressable(더 많은 설정이 있음. pressable 을 쓰는 것을 추천.) hitslap 이라는 것도 있음 
        onPress={travel}>
         <Text 
         style={{
           ...styles.btnText, 
           color: !working ? "white": theme.grey}}>Travel</Text>
        </TouchableOpacity>
      </View>
      <View>
        <TextInput 
        onSubmitEditing={addToDo}
        //  autoCorrect // 검색어 수정 끌 수 도 있음. 대문자로 시작도 지정 가능.
        //onChangeText={onChangeText} // 쓸때마다 함수로 지정.
        //multiline // 텍스트처럼 계속 글을 쓸 수 있음 멀티라인 아니면 한줄만 가능.
        returnKeyType='Done' // 키
        //keyboardType='web-search' // zl키보드 기능
        placeholder= {working ? "Add a To Do" : "where do you want to go?"} 
        style={styles.input}></TextInput>
        <ScrollView>{
          Object.keys(toDos).map(key => 
          toDos[key].working == working ? (<View style={styles.toDo}>
            <Text style={styles.toDoText}>{toDos[key].text}</Text>
          </View>): null
          )}
          </ScrollView>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.bg,
    paddingHorizontal: 20
  },
  header: {
    justifyContent: "space-between",
    flexDirection: "row",
    marginTop: 100
  },
  btnText: {
    fontSize: 38,
    fontWeight: "600",
  },
  input: {
    backgroundColor: "white",
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 30,
    marginVertical: 20,
    fontSize: 18,
  },
  todo: {
    backgroundColor:theme.grey,
    marginBottom:10,
    paddingVertical: 20,
    paddingHorizontal: 40,
    borderRadius: 14
  },
  toDoText: {
    color: "white",
    fontSize: 16,
    fontWeight: "500",

  },
});


3.6 
prompt 는 ios 에서만 작동 됨
destructive 역시 ios 에서만 작동.


3.7
header
    onPress = 손가락 넣고 떼는 것.
    object 를 Hadh map 형태로 사용~
    

3.8
뭔 챌린지..
1. 어플리케이션이 내가 마지막으로 갔던 곳을 저장
AsyncStorage 에 저장 그리고 복원
2. todo function 
finish todo 섹션 추가, complete 에 대한 기능
3. 유저가 text 를 수정할 수 있게끔
todo 를 수정하는 동안에는 text input 을 보여준다.
